language: cpp

services:
    - docker

os: linux

# The BADGE environment variable is used to distinguish badges to display
# Without it, the build would be marked failing regardless of the platform

jobs:
    include:
        #########
        # Linux #
        #########

        - name: "RaZ - Linux GCC"
          os: linux
          env:
            - C_COMPILER=gcc
            - CXX_COMPILER=g++
            - BUILD_TESTS=false
            - COVERAGE=false
            - BADGE=linux

        - name: "RaZ - Linux Clang"
          os: linux
          env:
            - C_COMPILER=clang
            - CXX_COMPILER=clang++
            - BUILD_TESTS=false
            - COVERAGE=false
            - BADGE=linux

        - name: "RaZ - Linux GCC + Tests"
          os: linux
          env:
            - C_COMPILER=gcc
            - CXX_COMPILER=g++
            - BUILD_TESTS=true
            - COVERAGE=true
            - BADGE=linux

        - name: "RaZ - Linux Clang + Tests"
          os: linux
          env:
            - C_COMPILER=clang
            - CXX_COMPILER=clang++
            - BUILD_TESTS=true
            - COVERAGE=false
            - BADGE=linux

        #########
        # macOS #
        #########

        - name: "RaZ - macOS Clang"
          os: osx
          env:
            - C_COMPILER=clang
            - CXX_COMPILER=clang++
            - BUILD_TESTS=false
            - COVERAGE=false
            - BADGE=osx

        # Temporarily the macOS test build; GLFW fails to be initialized, while RaZ runs fine on an actual Mac
        #- name: "RaZ - macOS Clang + Tests"
        #  os: osx
        #  env:
        #    - C_COMPILER=clang
        #    - CXX_COMPILER=clang++
        #    - BUILD_TESTS=true
        #    - COVERAGE=false
        #    - BADGE=osx

# Disabling depth to fetch only the latest commit
git:
    depth: false

install:
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
        docker build -t raz .;
      fi

before_script:
    - export DISPLAY=:99.0
    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then ( sudo Xvfb :99 -ac -screen 0 1280x720x16; echo ok )& fi
    - sleep 3 # Gives Xvfb some time to start

script:
    # Linux

    # Run Docker, build RaZ, launch unit tests if asked, and generate code coverage details & upload them to Coveralls if asked
    # Xvfb allows to run a program in headless mode (without a screen); this allows GLFW to be initialized properly
    - if [ "$TRAVIS_OS_NAME" = "linux" ]; then
        docker run --name RaZ -w /RaZ -v `pwd`:/RaZ -e TRAVIS_JOB_ID="$TRAVIS_JOB_ID" -e TRAVIS_BRANCH="$TRAVIS_BRANCH" raz
            bash -c "
                mkdir build && cd build &&
                cmake -G \"Unix Makefiles\" -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=Debug \
                                            -DRAZ_BUILD_EXAMPLES=true -DRAZ_BUILD_TESTS=${BUILD_TESTS} -DRAZ_ENABLE_COVERAGE=${COVERAGE} \
                                            -DRAZ_USE_FBX=true .. &&
                make -j4 &&
                pwd && find . &&
                if [[ ${BUILD_TESTS} == true ]]; then
                    xvfb-run -a --server-args='-screen 0 1280x720x16' ./tests/RaZ_Tests;
                fi &&
                if [[ ${COVERAGE} == true ]]; then
                    lcov -d ./CMakeFiles/RaZ.dir/src/ -c -o coverage.info &&
                    lcov -r coverage.info '/usr/*' -o coverage.info &&
                    lcov -l coverage.info &&
                    coveralls-lcov --repo-token=${COVERALLS_TOKEN} coverage.info;
                fi
            ";
      fi

    # macOS

    - if [ "$TRAVIS_OS_NAME" = "osx" ]; then
        mkdir build && cd build &&
        cmake -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_BUILD_TYPE=Debug \
              -DRAZ_BUILD_EXAMPLES=true -DRAZ_BUILD_TESTS=${BUILD_TESTS} -DRAZ_ENABLE_COVERAGE=${COVERAGE} \
              -DRAZ_USE_FBX=false .. &&
        make -j4 &&
        pwd && find . &&
        if [[ ${BUILD_TESTS} == true ]]; then
            ./tests/RaZ_Tests;
        fi;
      fi

#webhooks:
#    urls:
#        secure: URL
#    on_success: change
#    on_failure: always
#    on_start: never
#    on_cancel: never
#    on_error: always
