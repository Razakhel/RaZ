language: cpp

sudo: required

services:
    - docker

os:
    - linux

matrix:
    include:
        - name: "RaZ - GCC"
          env:
            - CXX_COMPILER=g++
            - C_COMPILER=gcc
            - BUILD_TESTS=false
            - COVERAGE=false

        - name: "RaZ - Clang"
          env:
            - CXX_COMPILER=clang++
            - C_COMPILER=clang
            - BUILD_TESTS=false
            - COVERAGE=false

        - name: "RaZ - GCC + Tests"
          env:
            - CXX_COMPILER=g++
            - C_COMPILER=gcc
            - BUILD_TESTS=true
            - COVERAGE=true

        - name: "RaZ - Clang + Tests"
          env:
            - CXX_COMPILER=clang++
            - C_COMPILER=clang
            - BUILD_TESTS=true
            - COVERAGE=false

# Disabling depth to fetch only the latest commit
git:
    depth: false

install:
    - docker build -t raz .

script:
    # Run Docker, build RaZ, launch unit tests if asked, and generate code coverage details & upload them to Coveralls if asked
    # Xvfb allows to run a program in headless mode (without a screen); this allows GLFW to be initialized properly
    - docker run --name RaZ -w /RaZ -v `pwd`:/RaZ -e TRAVIS_JOB_ID="$TRAVIS_JOB_ID" -e TRAVIS_BRANCH="$TRAVIS_BRANCH" raz
        bash -c "
            mkdir build && cd build &&
            cmake -G \"Unix Makefiles\" -DCMAKE_CXX_COMPILER=${CXX_COMPILER} -DCMAKE_C_COMPILER=${C_COMPILER} -DCMAKE_BUILD_TYPE=Debug \
                                        -DRAZ_BUILD_EXAMPLES=true -DRAZ_BUILD_TESTS=${BUILD_TESTS} -DRAZ_ENABLE_COVERAGE=${COVERAGE} \
                                        -DRAZ_USE_FBX=true .. &&
            make -j4 &&
            pwd && find . &&
            if [[ ${BUILD_TESTS} == true ]]; then
                cd tests/ &&
                xvfb-run -a --server-args='-screen 0 1280x720x16' ./RaZ_Tests &&
                cd ..;
            fi &&
            if [[ ${COVERAGE} == true ]]; then
                lcov -d ./CMakeFiles/RaZ.dir/src/ -c -o coverage.info &&
                lcov -r coverage.info '/usr/*' -o coverage.info &&
                lcov -l coverage.info &&
                coveralls-lcov --repo-token=${COVERALLS_TOKEN} coverage.info;
            fi
        "

#webhooks:
#    urls:
#        secure: URL
#    on_success: change
#    on_failure: always
#    on_start: never
#    on_cancel: never
#    on_error: always
